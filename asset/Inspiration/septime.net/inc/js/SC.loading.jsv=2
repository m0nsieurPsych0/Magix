/**
 * SC / main / loading
 */
var SC = (function () {
    // params
    var locked = false;								// variable to lock check loading file
    var before = 0;
    var after = 0;
    var list_bp = [500, 100/*,10*/];				// list of the bandwith class => see on json file
    var _bp = 500;									// banwidth by default
    var _preload = false;							// list of the file to upload
    var _json;										// data of the json file

    var url = "inc/json/data-loading.json.php"; 	// url of the json file

    var sound_html = "";							// html5 sound player html element
    var video_html = "";							// html5 video player html element

    var _ltimer = null,
        _ltimer2 = null,
        _ltimer3 = null,
        _loader = {
            steps: {logo: false, current: false},
            groups: {
                band: {d: 1000, loaded: false},
                video: {d: 5000, loaded: false},
                book: {d: 3000, loaded: false},
                audio: {d: 2000, loaded: false},
                start: {d: 1000, loaded: false}
            }
        };

    var DEFAULT_THEME = 'light';
    var _theme = DEFAULT_THEME;
    var defaultVideoAlreadyPlayed = false;

    // private
    function _construct() {
        loadData();
    }

    function loadData() {
        // load json data of the files to upload
        var jqxhr = $.getJSON(url, function (data) {
            // console.log('success');
            //console.log(data[list_bp[0]]);
            _json = data;
            _preload = data[_bp + 'k'];

            // display preload html interface
            SC.LoadingHtml();
        })
            .done(function () {
                // console.log('second success');
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ', ' + error;
                // console.log('error' + err);
            })
            .always(function () {
                // console.log('complete');
            });
    }


    /**
     * renvoi le premier type de media non chargé
     */
    var getCurrentLoader = function () {
        if (!_loader.steps.logo) return false;
        //window.clearInterval(_ltimer);
        //alert('ok');
        var current = false;
        $.each(_loader.groups, function (key, group) {
            if (group.loaded === false) {
                current = key;
                //debugger;
                return false;
            }
        });
        return current;
    };

    /* PRELOAD */
    function launchPreload(key) {

        if (_loader.groups[key].loaded === false && locked === false && _preload[key] !== undefined) {
            //console.log(_preload[key]['dark']);
            $continue = false;
            if (_preload[key][_theme] !== undefined) {
                if ($.isEmptyObject(_preload[key][_theme][0]) === false) {
                    locked = true;

                    // video medias
                    if (_preload[key][_theme][0]['type'] === "video") {
                        var idVideo = SC.UI.video_id + _theme;

                        // console.log('video preloaded', _theme);
                        SC.UI.createVideo(idVideo, _preload[key][_theme]);
                        //SC.UI.createVideo(idVideo, _preload[key][_theme][0]['src']);
                        var myVideoTag = document.getElementById(idVideo);

                        // test with event timeupdate
                        myVideoTag.addEventListener('canplaythrough', function (e) {
                            // la video est assez chargée
                            // defaultVideoAlreadyPlayed est une sécurité car parfois l'event 'canplaythrough'
                            // se déclenche en boucle pour le thème par défaut
                            if (!defaultVideoAlreadyPlayed || SC.Loading.getTheme() !== DEFAULT_THEME) {
                                // console.log('can play trough event');
                                launchPreloadCallbackOk(null);
                                defaultVideoAlreadyPlayed = true;
                            }
                        });

                        //myVideoTag.src = _preload[key][_theme][0]['src'];
                        // console.log("Video : " + _preload[key][_theme][0]['src']);
                    }
                    // other media
                    else {
                        if (_preload[key][_theme][0]['type'] === "sound") {
                            // Sound Media
                            type = true;
                        }
                        else {
                            // Other media
                            type = false;
                        }

                        // prepare bandwith test
                        if (key === "band" && _theme === DEFAULT_THEME) launchCalcBandWidth();

                        // add callbacks events
                        /*if (type) {
                            // Sound
                            //createjs.Sound.addEventListener("loadComplete", launchPreloadCallbackOk);
                            SC.Loader.addEvent("loadComplete", launchPreloadCallbackOk,type);
                        } else {
                            // Other
                            SC.Loader.addEvent("complete", launchPreloadCallbackOk,type);
                        }*/
                        SC.Loader.addMultipleToQueue(_preload[key][_theme], type);

                        if (type && navigator.userAgent.indexOf('Mac') != -1 && navigator.userAgent.indexOf('Safari') != -1) {
                            // Safari Mac doesn't support 'loadComplete' event
                            setTimeout(1500, launchPreloadCallbackOk());
                        } else {
                        SC.Loader.addEvent(type ? 'fileload' : 'complete', launchPreloadCallbackOk, type);
                        }

                        SC.Loader.addEvent("error", launchPreloadCallbackError);
                    }

                    // console.log("Load file for key : " + key);
                } else {
                    $continue = true;
                }
            }
            else {
                $continue = true;
            }

            if ($continue === true) {
                // no files to upload = continue process
                launchPreloadCallbackOk();
            }
        }
    }

    function launchPreloadCallbackOk(event) {
        // end of file download
        var key = getCurrentLoader();

        //alert(key);

        // finish bandwith test
        if (key) {
            if (_preload[key][_theme][0] !== undefined && key === "band" && _theme === DEFAULT_THEME) {
                stopCalcBandWidth(_preload[key][_theme][0]['size']);
                //console.log("File size :" + _preload[key][_theme][0]['size']);
                //console.log(_preload[key][_theme]);
            }

            _loader.groups[key].loaded = true;
            SC.LoadingHtml.setGroupLoader(key);
            locked = false;
            key = getCurrentLoader();
            if (key) {
                launchPreload(key);
            }
        }
    }

    function launchPreloadCallbackError(event) {
        // error on file download
        //console.log(" Error queue ! " + event);
    }

    /* BANDWIDTH */
    var launchCalcBandWidth = function () {
        before = new Date();
        before = before.getTime();
    };

    var stopCalcBandWidth = function (tailleMedia) {
        // calcul the speed
        after = new Date();
        after = after.getTime();
        time = after - before;
        speed = Math.round((tailleMedia / time) * 10) / 10;

        // select the data for this speed
        for (var i = 0; i < list_bp.length; i++) {
            if (speed < list_bp[i]) {
                _bp = list_bp[i];
            }
        }

        // save the new data
        _preload = _json[_bp + "k"];

        // console.log("BandWidth : duree=" + time + "ms debit=" + speed + "Ko/s mode : " + _bp);
    };

    // accesseurs
    var setTheme = function (theme) {
        _theme = theme;
    };

    var getTheme = function () {
        return _theme;
    };

    // public
    this.Loading = function () {
        _construct();
    };

    this.Loading.launchPreload = launchPreload;
    this.Loading.setTheme = setTheme;
    this.Loading.getTheme = getTheme;
    this.Loading.getCurrentLoader = getCurrentLoader;

    // variables
    this.Loading._loader = _loader;
    this.Loading._ltimer = _ltimer;
    this.Loading._ltimer2 = _ltimer2;
    this.Loading._ltimer3 = _ltimer3;

    return this;

}).apply(SC);
